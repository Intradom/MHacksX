<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

audio_play_sound(snd_game_bg_audio, 1, true); // Loop bg music, soundtrack: Engigma, Water Creativity

player_id = instance_create(80, 1936, obj_player);
player_id.image_xscale = -0.5;
player_id.image_yscale = 0.5;

// Game parameters
low_spawn = 1;

// Game variables
high_spawn = 5;
time_until_next_wave = 10;
portal_wait_time = 2;
wave = 0;

alarm[0] = room_speed * time_until_next_wave;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_game)
{
    wave++;
    
    if (wave % 5 == 0) // Adds difficulty
    {
        if (time_until_next_wave &gt; 1)
            time_until_next_wave--;
        high_spawn++;
    }
    if (wave == 30)
        portal_wait_time = 1;
        
    
    portal_inst = instance_create(player_id.x + irandom_range(0, view_hport / 2) * (irandom(1) * 2 - 1), player_id.y + irandom_range(0, view_hport / 2) * (irandom(1) * 2 - 1), obj_portal);
    portal_inst.spawn_amount = irandom_range(low_spawn, high_spawn);
    portal_inst.spawn_type = irandom_range(0, 2);
    portal_inst.wait_time = portal_wait_time;
    with (portal_inst)
    {
        while (place_meeting(x, y, obj_portal) || place_meeting(x, y, obj_platform) || x &lt; 0 || x &gt; room_width || y &gt; room_height || y &lt; 0)
        {
            x = other.player_id.x + irandom_range(0, view_hport / 2) * (irandom(1) * 2 - 1);
            y = other.player_id.y + irandom_range(0, view_hport / 2) * (irandom(1) * 2 - 1);
        }
    }
    
    alarm[0] = room_speed * time_until_next_wave;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_game)
{
    global.player_x = player_id.x;
    global.player_y = player_id.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_enter) &amp;&amp; room == rm_end)
{
    audio_stop_all();
    room_goto(rm_menu);
}
if (room == rm_menu)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);

if (room == rm_end)
{
    draw_set_halign(fa_center);
    draw_set_font(fnt_end);
    draw_text(504, 406, string(wave));
}
else // In game room
{
    draw_set_colour(c_white);
    draw_text(16, 16, "Wave: " + string(wave));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
